#!/usr/bin/env python3
from subprocess import PIPE, run
import sys, time
def out(command):
    result = run(command, stdout=PIPE, stderr=PIPE, universal_newlines=True, shell=True)
    return (result.stdout).strip()
'''
branch_name = out('git branch | grep "*" | sed "s/\* //"')
reflog_message= out('git reflog -1')
merged_branch_name=out('echo '+reflog_message+' | cut -d" " -f 4 | sed "s/://"')
print("[INFO] pre-push git hook invoked.")
print("[INFO] Merged "+ merged_branch_name  +" into  "+ branch_name)
bumpBranches = ["realease",'feature','patch']
branchType = merged_branch_name.split('-')[0]
'''

print("[INFO] Pre-push")
versionFile = open("version.txt","r")
version_local = (versionFile.readline()).strip()
versionFile.close()
print("[INFO] "+version_local)
out('git fetch')
out('git checkout origin/develop version.txt')

#out('git checkout -- origin/develop version.txt')
versionFile = open("version.txt","r")
version_remote = (versionFile.readline()).strip()
versionFile.close()
out("git checkout HEAD version.txt")

print("[INFO] "+version_remote)
if version_local != version_remote:
    print("[ABORT] PUSH ABORTED: Version file mismatch.")
    print("[ABORT] Local version is: "+str(version_local).strip())
    print("[ABORT] Remote version is: "+str(version_remote))
    print("[HINT] Run git pull to update")
    sys.exit(1)
print("[INFO] Versions match.")
sys.exit(0)

'''
if branch_name == "develop" and branchType in bumpBranches:
    # replace version file with what is in develop
    print("[INFO] Pulling version.txt from origin develop.")
    out('git fetch')
    out('git checkout -m origin/develop version.txt')
    #read in the version info
    versionFile = open("version.txt","r")
    version = versionFile.readline()
    versionFile.close()
    majMinFeat = version.split('.')
    # update version number and change
    versionFile = open("version.txt","w")
    if branchType == "realease":
        majMinFeat[0] = str(int(majMinFeat[0]) +1)
        majMinFeat[1] = '0'
        majMinFeat[2] = '0'
    if branchType == 'feature':
        majMinFeat[1] = str(int(majMinFeat[1]) +1)
    elif branchType == 'patch':
        majMinFeat[2] = str(int(majMinFeat[2]) +1)
    versionFile.write('.'.join(majMinFeat))
    versionFile.close()
    
    #print("[INFO] Version: " + '.'.join(majMinFeat))
    sys.stdin = open('/dev/tty')
    pushVal = input('Local version has changed. Update version in remote? (y/n)')
    if pushVal.strip().lower().startswith('y'):
        out("git add .")
        out("git commit -m 'version updated' ")
        out("git push origin develop")
        print("[INFO] Local and remote develop updated to version: "+'.'.join(majMinFeat))
    else:
        print("[WARN] Remote not updated. Local and remote out of sync.")
    '''